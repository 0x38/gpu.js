/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace(){},
yy: {},
symbols_: {"error":2,"Expression":3,"Variable":4,"AssignmentExpression":5,"MatrixAccess":6,"MathExpression":7,"BooleanExpression":8,"StringLiteral":9,"(":10,")":11,"NullLiteral":12,"NULL":13,"BooleanLiteral":14,"TRUE":15,"FALSE":16,"NumericLiteral":17,"NUMERIC_LITERAL":18,"STRING_LITERAL":19,"IDENTIFIER":20,"=":21,"AssignmentOperator":22,"*=":23,"/=":24,"%=":25,"+=":26,"-=":27,"MatrixIndexList":28,"MatrixIndex":29,"[":30,"]":31,"ContextAccess":32,"THIS":33,".":34,"AdditiveExpression":35,"PostfixMathExpression":36,"NumberLiteral":37,"++":38,"--":39,"UnaryMathExpression":40,"UnaryMathExpr":41,"+":42,"-":43,"MultiplicativeExpression":44,"*":45,"UnaryExpression":46,"/":47,"%":48,"RelationalExpression":49,"UnaryBoolExpression":50,"<":51,">":52,"<=":53,">=":54,"EqualityExpression":55,"==":56,"!=":57,"===":58,"!==":59,"LogicalANDExpression":60,"&&":61,"BitwiseORExpression":62,"LogicalORExpression":63,"||":64,"UnaryBoolExpr":65,"!":66,"Statement":67,"Block":68,"VariableStatement":69,"ExpressionStatement":70,"ForStatement":71,"IfStatement":72,"BreakStatement":73,"ContinueStatement":74,"ReturnStatement":75,"{":76,"StatementList":77,"}":78,"VAR":79,";":80,"CONTINUE":81,"BREAK":82,"RETURN":83,"FOR":84,"IF":85,"ELSE":86,"Program":87,"SourceElements":88,"EOF":89,"SourceElement":90,"FunctionDeclaration":91,"FUNCTION":92,"FunctionBody":93,"FormalParameterList":94,",":95,"$accept":0,"$end":1},
terminals_: {2:"error",8:"BooleanExpression",10:"(",11:")",13:"NULL",15:"TRUE",16:"FALSE",18:"NUMERIC_LITERAL",19:"STRING_LITERAL",20:"IDENTIFIER",21:"=",23:"*=",24:"/=",25:"%=",26:"+=",27:"-=",30:"[",31:"]",33:"THIS",34:".",37:"NumberLiteral",38:"++",39:"--",42:"+",43:"-",45:"*",46:"UnaryExpression",47:"/",48:"%",50:"UnaryBoolExpression",51:"<",52:">",53:"<=",54:">=",56:"==",57:"!=",58:"===",59:"!==",61:"&&",62:"BitwiseORExpression",64:"||",66:"!",70:"ExpressionStatement",76:"{",78:"}",79:"VAR",80:";",81:"CONTINUE",82:"BREAK",83:"RETURN",84:"FOR",85:"IF",86:"ELSE",89:"EOF",92:"FUNCTION",95:","},
productions_: [0,[3,1],[3,1],[3,1],[3,1],[3,1],[3,1],[3,3],[12,1],[14,1],[14,1],[17,1],[9,1],[4,1],[5,3],[5,3],[22,1],[22,1],[22,1],[22,1],[22,1],[6,2],[28,2],[28,1],[29,3],[32,5],[7,1],[36,1],[36,2],[36,2],[40,1],[40,1],[41,2],[41,2],[41,2],[41,2],[44,1],[44,1],[44,3],[44,3],[44,3],[35,1],[35,3],[35,3],[49,1],[49,1],[49,3],[49,3],[49,3],[49,3],[55,1],[55,3],[55,3],[55,3],[55,3],[60,1],[60,3],[63,1],[63,3],[65,2],[65,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[67,1],[68,3],[77,2],[77,0],[69,3],[69,3],[74,2],[73,2],[75,2],[75,3],[71,9],[71,8],[71,8],[71,7],[71,8],[71,7],[71,7],[71,6],[72,5],[72,7],[87,2],[88,2],[88,0],[90,1],[90,1],[91,7],[91,8],[94,1],[94,3],[93,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
/**/) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 8:
            this.$ = new LiteralNode(null);
        
break;
case 9:
            this.$ = new LiteralNode(true);
        
break;
case 10:
            this.$ = new LiteralNode(false);
        
break;
case 11:
            this.$ = new LiteralNode(parseNumericLiteral($$[$0]));
        
break;
case 12:
            this.$ = new LiteralNode($$[$0]);
        
break;
case 13:
            this.$ = new IdentifierNode($$[$0]);
        
break;
case 14:
            this.$ = new AssignmentExpressionNode("=", $$[$0-2], $$[$0]);
        
break;
case 15:
            this.$ = new AssignmentExpressionNode($$[$0-1], $$[$0-2], $$[$0]);
        
break;
case 21:
            this.$ = new MatrixAccessNode($$[$0-1], $$[$0]);
        
break;
case 22:
            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 23:
            this.$ = [$$[$0]];
        
break;
case 24:
            this.$ = $$[$0-2];
        
break;
case 25:
            this.$ = new ContextAccessNode($$[$0-2], $$[$0]);
        
break;
case 26:
            this.$ = new MathExpressionNode($$[$0]);
        
break;
case 28:
            this.$ = new UpdateExpressionNode("++", $$[$0-1], false);
        
break;
case 29:
            this.$ = new UpdateExpressionNode("--", $$[$0-1], false);
        
break;
case 32:
            this.$ = new UpdateExpressionNode("++", $$[$0], true);
        
break;
case 33:
            this.$ = new UpdateExpressionNode("--", $$[$0], true);
        
break;
case 34:
            this.$ = new UnaryExpressionNode("+", true, $$[$0]);
        
break;
case 35:
            this.$ = new UnaryExpressionNode("-", true, $$[$0]);
        
break;
case 38:
            this.$ = new BinaryExpressionNode("*", $$[$0-2], $$[$0]);
        
break;
case 39:
            this.$ = new BinaryExpressionNode("/", $$[$0-2], $$[$0]);
        
break;
case 40:
            this.$ = new BinaryExpressionNode("%", $$[$0-2], $$[$0]);
        
break;
case 42:
            this.$ = new BinaryExpressionNode("+", $$[$0-2], $$[$0]);
        
break;
case 43:
            this.$ = new BinaryExpressionNode("-", $$[$0-2], $$[$0]);
        
break;
case 46:
            this.$ = new BinaryExpressionNode("<", $$[$0-2], $$[$0]);
        
break;
case 47:
            this.$ = new BinaryExpressionNode(">", $$[$0-2], $$[$0]);
        
break;
case 48:
            this.$ = new BinaryExpressionNode("<=", $$[$0-2], $$[$0]);
        
break;
case 49:
            this.$ = new BinaryExpressionNode(">=", $$[$0-2], $$[$0]);
        
break;
case 51:
            this.$ = new BinaryExpressionNode("==", $$[$0-2], $$[$0]);
        
break;
case 52:
            this.$ = new BinaryExpressionNode("!=", $$[$0-2], $$[$0]);
        
break;
case 53:
            this.$ = new BinaryExpressionNode("===", $$[$0-2], $$[$0]);
        
break;
case 54:
            this.$ = new BinaryExpressionNode("!==", $$[$0-2], $$[$0]);
        
break;
case 56:
            this.$ = new LogicalExpressionNode("&&", $$[$0-2], $$[$0]);
        
break;
case 58:
            this.$ = new LogicalExpressionNode("||", $$[$0-2], $$[$0]);
        
break;
case 59:
            this.$ = new UnaryExpressionNode("!", true, $$[$0]);
        
break;
case 69:
            this.$ = new BlockStatementNode($$[$0-1]);
        
break;
case 70:
            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 71:
            this.$ = [];
        
break;
case 72:
            this.$ = new VariableDeclaratorNode($$[$0-1], null);
        
break;
case 73:
            this.$ = new VariableDeclaratorNode($$[$0-1].left, $$[$0-1].right);
        
break;
case 74:
            this.$ = new ContinueStatementNode();
        
break;
case 75:
            this.$ = new BreakStatementNode();
        
break;
case 76:
            this.$ = new ReturnStatementNode(null);
        
break;
case 77:
            this.$ = new ReturnStatementNode($$[$0-1]);
        
break;
case 78:
            this.$ = new ForStatementNode($$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);
        
break;
case 79:
            this.$ = new ForStatementNode($$[$0-5], $$[$0-3], null, $$[$0]);
        
break;
case 80:
            this.$ = new ForStatementNode($$[$0-5], null, $$[$0-2], $$[$0]);
        
break;
case 81:
            this.$ = new ForStatementNode($$[$0-4], null, null, $$[$0]);
        
break;
case 82:
            this.$ = new ForStatementNode(null, $$[$0-4], $$[$0-2], $$[$0]);
        
break;
case 83:
            this.$ = new ForStatementNode(null, $$[$0-3], null, $$[$0]);
        
break;
case 84:
            this.$ = new ForStatementNode(null, null, $$[$0-2], $$[$0]);
        
break;
case 85:
            this.$ = new ForStatementNode(null, null, null, $$[$0]);
        
break;
case 86:
            this.$ = new IfStatementNode($$[$0-2], $$[$0], null);
        
break;
case 87:
            this.$ = new IfStatementNode($$[$0-4], $$[$0-2], $$[$0]);
        
break;
case 88:
            this.$ = new ProgramNode($$[$0-1]);
            return this.$;
        
break;
case 89:
            this.$ = $$[$0-1].concat($$[$0]);
        
break;
case 90:
            this.$ = [];
        
break;
case 93:
            this.$ = new FunctionDeclarationNode(new IdentifierNode($$[$0-5]), [], $$[$0-1], false, false);
        
break;
case 94:
            this.$ = new FunctionDeclarationNode(new IdentifierNode($$[$0-6]), $$[$0-4], $$[$0-1], false, false);
        
break;
case 95:
            this.$ = [new IdentifierNode($$[$0])];
        
break;
case 96:
            this.$ = $$[$0-2].concat(new IdentifierNode($$[$0]));
        
break;
}
},
table: [{70:[2,90],76:[2,90],79:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90],87:1,88:2,89:[2,90],92:[2,90]},{1:[3]},{67:5,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19],89:[1,3],90:4,91:6,92:[1,15]},{1:[2,88]},{70:[2,89],76:[2,89],78:[2,89],79:[2,89],81:[2,89],82:[2,89],83:[2,89],84:[2,89],85:[2,89],89:[2,89],92:[2,89]},{70:[2,91],76:[2,91],78:[2,91],79:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91],89:[2,91],92:[2,91]},{70:[2,92],76:[2,92],78:[2,92],79:[2,92],81:[2,92],82:[2,92],83:[2,92],84:[2,92],85:[2,92],89:[2,92],92:[2,92]},{70:[2,61],76:[2,61],78:[2,61],79:[2,61],81:[2,61],82:[2,61],83:[2,61],84:[2,61],85:[2,61],86:[2,61],89:[2,61],92:[2,61]},{70:[2,62],76:[2,62],78:[2,62],79:[2,62],81:[2,62],82:[2,62],83:[2,62],84:[2,62],85:[2,62],86:[2,62],89:[2,62],92:[2,62]},{70:[2,63],76:[2,63],78:[2,63],79:[2,63],81:[2,63],82:[2,63],83:[2,63],84:[2,63],85:[2,63],86:[2,63],89:[2,63],92:[2,63]},{70:[2,64],76:[2,64],78:[2,64],79:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64],86:[2,64],89:[2,64],92:[2,64]},{70:[2,65],76:[2,65],78:[2,65],79:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65],86:[2,65],89:[2,65],92:[2,65]},{70:[2,66],76:[2,66],78:[2,66],79:[2,66],81:[2,66],82:[2,66],83:[2,66],84:[2,66],85:[2,66],86:[2,66],89:[2,66],92:[2,66]},{70:[2,67],76:[2,67],78:[2,67],79:[2,67],81:[2,67],82:[2,67],83:[2,67],84:[2,67],85:[2,67],86:[2,67],89:[2,67],92:[2,67]},{70:[2,68],76:[2,68],78:[2,68],79:[2,68],81:[2,68],82:[2,68],83:[2,68],84:[2,68],85:[2,68],86:[2,68],89:[2,68],92:[2,68]},{20:[1,23]},{70:[2,71],76:[2,71],77:24,78:[2,71],79:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{4:25,5:26,20:[1,27]},{10:[1,28]},{10:[1,29]},{80:[1,30]},{80:[1,31]},{3:33,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43,80:[1,32]},{10:[1,54]},{67:56,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],78:[1,55],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{21:[1,58],22:59,23:[1,60],24:[1,61],25:[1,62],26:[1,63],27:[1,64],80:[1,57]},{80:[1,65]},{11:[2,13],21:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],30:[2,13],38:[2,13],39:[2,13],80:[2,13]},{3:66,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43,80:[1,67]},{3:68,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{70:[2,75],76:[2,75],78:[2,75],79:[2,75],81:[2,75],82:[2,75],83:[2,75],84:[2,75],85:[2,75],86:[2,75],89:[2,75],92:[2,75]},{70:[2,74],76:[2,74],78:[2,74],79:[2,74],81:[2,74],82:[2,74],83:[2,74],84:[2,74],85:[2,74],86:[2,74],89:[2,74],92:[2,74]},{70:[2,76],76:[2,76],78:[2,76],79:[2,76],81:[2,76],82:[2,76],83:[2,76],84:[2,76],85:[2,76],86:[2,76],89:[2,76],92:[2,76]},{80:[1,69]},{11:[2,1],21:[1,58],22:59,23:[1,60],24:[1,61],25:[1,62],26:[1,63],27:[1,64],28:70,29:73,30:[1,74],38:[1,71],39:[1,72],80:[2,1]},{11:[2,2],80:[2,2]},{11:[2,3],80:[2,3]},{11:[2,4],80:[2,4]},{11:[2,5],80:[2,5]},{11:[2,6],80:[2,6]},{3:75,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{11:[2,26],31:[2,26],42:[1,76],43:[1,77],80:[2,26]},{11:[2,12],80:[2,12]},{11:[2,41],31:[2,41],42:[2,41],43:[2,41],45:[1,78],47:[1,79],48:[1,80],80:[2,41]},{11:[2,36],31:[2,36],42:[2,36],43:[2,36],45:[2,36],47:[2,36],48:[2,36],80:[2,36]},{11:[2,37],31:[2,37],42:[2,37],43:[2,37],45:[2,37],47:[2,37],48:[2,37],80:[2,37]},{11:[2,30],31:[2,30],42:[2,30],43:[2,30],45:[2,30],47:[2,30],48:[2,30],80:[2,30]},{11:[2,31],31:[2,31],42:[2,31],43:[2,31],45:[2,31],47:[2,31],48:[2,31],80:[2,31]},{34:[1,81]},{11:[2,27],31:[2,27],42:[2,27],43:[2,27],45:[2,27],47:[2,27],48:[2,27],80:[2,27]},{4:83,20:[1,27],36:46,37:[1,49],38:[1,50],39:[1,51],40:82,41:47,42:[1,52],43:[1,53]},{4:83,20:[1,27],36:46,37:[1,49],38:[1,50],39:[1,51],40:84,41:47,42:[1,52],43:[1,53]},{4:83,20:[1,27],36:46,37:[1,49],38:[1,50],39:[1,51],40:85,41:47,42:[1,52],43:[1,53]},{4:83,20:[1,27],36:46,37:[1,49],38:[1,50],39:[1,51],40:86,41:47,42:[1,52],43:[1,53]},{11:[1,87],20:[1,89],94:88},{70:[2,69],76:[2,69],78:[2,69],79:[2,69],81:[2,69],82:[2,69],83:[2,69],84:[2,69],85:[2,69],86:[2,69],89:[2,69],92:[2,69]},{70:[2,70],76:[2,70],78:[2,70],79:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{70:[2,72],76:[2,72],78:[2,72],79:[2,72],81:[2,72],82:[2,72],83:[2,72],84:[2,72],85:[2,72],86:[2,72],89:[2,72],92:[2,72]},{4:83,7:90,20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{4:83,7:91,20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{20:[2,16],33:[2,16],37:[2,16],38:[2,16],39:[2,16],42:[2,16],43:[2,16]},{20:[2,17],33:[2,17],37:[2,17],38:[2,17],39:[2,17],42:[2,17],43:[2,17]},{20:[2,18],33:[2,18],37:[2,18],38:[2,18],39:[2,18],42:[2,18],43:[2,18]},{20:[2,19],33:[2,19],37:[2,19],38:[2,19],39:[2,19],42:[2,19],43:[2,19]},{20:[2,20],33:[2,20],37:[2,20],38:[2,20],39:[2,20],42:[2,20],43:[2,20]},{70:[2,73],76:[2,73],78:[2,73],79:[2,73],81:[2,73],82:[2,73],83:[2,73],84:[2,73],85:[2,73],86:[2,73],89:[2,73],92:[2,73]},{80:[1,92]},{3:93,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43,80:[1,94]},{11:[1,95]},{70:[2,77],76:[2,77],78:[2,77],79:[2,77],81:[2,77],82:[2,77],83:[2,77],84:[2,77],85:[2,77],86:[2,77],89:[2,77],92:[2,77]},{11:[2,21],29:96,30:[1,74],80:[2,21]},{11:[2,28],31:[2,28],42:[2,28],43:[2,28],45:[2,28],47:[2,28],48:[2,28],80:[2,28]},{11:[2,29],31:[2,29],42:[2,29],43:[2,29],45:[2,29],47:[2,29],48:[2,29],80:[2,29]},{11:[2,23],30:[2,23],80:[2,23]},{4:83,7:97,20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{11:[1,98]},{4:83,20:[1,27],32:45,33:[1,48],36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:99},{4:83,20:[1,27],32:45,33:[1,48],36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:100},{46:[1,101]},{46:[1,102]},{46:[1,103]},{20:[1,104]},{11:[2,32],31:[2,32],42:[2,32],43:[2,32],45:[2,32],47:[2,32],48:[2,32],80:[2,32]},{38:[1,71],39:[1,72]},{11:[2,33],31:[2,33],42:[2,33],43:[2,33],45:[2,33],47:[2,33],48:[2,33],80:[2,33]},{11:[2,34],31:[2,34],42:[2,34],43:[2,34],45:[2,34],47:[2,34],48:[2,34],80:[2,34]},{11:[2,35],31:[2,35],42:[2,35],43:[2,35],45:[2,35],47:[2,35],48:[2,35],80:[2,35]},{76:[1,105]},{11:[1,106],95:[1,107]},{11:[2,95],95:[2,95]},{11:[2,14],80:[2,14]},{11:[2,15],80:[2,15]},{3:108,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43,80:[1,109]},{80:[1,110]},{3:111,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],11:[1,112],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{67:113,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{11:[2,22],30:[2,22],80:[2,22]},{31:[1,114]},{11:[2,7],80:[2,7]},{11:[2,42],31:[2,42],42:[2,42],43:[2,42],45:[1,78],47:[1,79],48:[1,80],80:[2,42]},{11:[2,43],31:[2,43],42:[2,43],43:[2,43],45:[1,78],47:[1,79],48:[1,80],80:[2,43]},{11:[2,38],31:[2,38],42:[2,38],43:[2,38],45:[2,38],47:[2,38],48:[2,38],80:[2,38]},{11:[2,39],31:[2,39],42:[2,39],43:[2,39],45:[2,39],47:[2,39],48:[2,39],80:[2,39]},{11:[2,40],31:[2,40],42:[2,40],43:[2,40],45:[2,40],47:[2,40],48:[2,40],80:[2,40]},{34:[1,115]},{70:[2,90],76:[2,90],78:[2,90],79:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90],88:117,92:[2,90],93:116},{76:[1,118]},{20:[1,119]},{80:[1,120]},{3:121,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],11:[1,122],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{3:123,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],11:[1,124],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{11:[1,125]},{67:126,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{70:[2,86],76:[2,86],78:[2,86],79:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86],86:[1,127],89:[2,86],92:[2,86]},{11:[2,24],30:[2,24],80:[2,24]},{20:[1,128]},{78:[1,129]},{67:5,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],78:[2,97],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19],90:4,91:6,92:[1,15]},{70:[2,90],76:[2,90],78:[2,90],79:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90],88:117,92:[2,90],93:130},{11:[2,96],95:[2,96]},{3:131,4:34,5:35,6:36,7:37,8:[1,38],9:39,10:[1,40],11:[1,132],19:[1,42],20:[1,27],32:45,33:[1,48],35:41,36:46,37:[1,49],38:[1,50],39:[1,51],40:44,41:47,42:[1,52],43:[1,53],44:43},{11:[1,133]},{67:134,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{11:[1,135]},{67:136,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{67:137,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{70:[2,85],76:[2,85],78:[2,85],79:[2,85],81:[2,85],82:[2,85],83:[2,85],84:[2,85],85:[2,85],86:[2,85],89:[2,85],92:[2,85]},{67:138,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{11:[2,25],31:[2,25],42:[2,25],43:[2,25],45:[2,25],47:[2,25],48:[2,25],80:[2,25]},{70:[2,93],76:[2,93],78:[2,93],79:[2,93],81:[2,93],82:[2,93],83:[2,93],84:[2,93],85:[2,93],89:[2,93],92:[2,93]},{78:[1,139]},{11:[1,140]},{67:141,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{67:142,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{70:[2,81],76:[2,81],78:[2,81],79:[2,81],81:[2,81],82:[2,81],83:[2,81],84:[2,81],85:[2,81],86:[2,81],89:[2,81],92:[2,81]},{67:143,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{70:[2,83],76:[2,83],78:[2,83],79:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83],86:[2,83],89:[2,83],92:[2,83]},{70:[2,84],76:[2,84],78:[2,84],79:[2,84],81:[2,84],82:[2,84],83:[2,84],84:[2,84],85:[2,84],86:[2,84],89:[2,84],92:[2,84]},{70:[2,87],76:[2,87],78:[2,87],79:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87],86:[2,87],89:[2,87],92:[2,87]},{70:[2,94],76:[2,94],78:[2,94],79:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94],89:[2,94],92:[2,94]},{67:144,68:7,69:8,70:[1,9],71:10,72:11,73:12,74:13,75:14,76:[1,16],79:[1,17],81:[1,21],82:[1,20],83:[1,22],84:[1,18],85:[1,19]},{70:[2,79],76:[2,79],78:[2,79],79:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79],86:[2,79],89:[2,79],92:[2,79]},{70:[2,80],76:[2,80],78:[2,80],79:[2,80],81:[2,80],82:[2,80],83:[2,80],84:[2,80],85:[2,80],86:[2,80],89:[2,80],92:[2,80]},{70:[2,82],76:[2,82],78:[2,82],79:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82],86:[2,82],89:[2,82],92:[2,82]},{70:[2,78],76:[2,78],78:[2,78],79:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78],86:[2,78],89:[2,78],92:[2,78]}],
defaultActions: {3:[2,88]},
parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function parseNumericLiteral(literal) {
    if (literal.charAt(0) === "0") {
        if (literal.charAt(1).toLowerCase() === "x") {
            return parseInt(literal, 16);
        } else {
            return parseInt(literal, 8);
        }
    } else {
        return Number(literal);
    }
}

/* Begin Parser Customization Methods */
var _originalParseMethod = parser.parse;

parser.parse = function(source, args) {
    parser.wasNewLine = false;
    parser.newLine = false;
    parser.restricted = false;

    return _originalParseMethod.call(this, source);
};

parser.parseError = function(str, hash) {
//      alert(JSON.stringify(hash) + "\n\n\n" + parser.newLine + "\n" + parser.wasNewLine + "\n\n" + hash.expected.indexOf("';'"));
    if (!((hash.expected && hash.expected.indexOf("';'") >= 0) && (hash.token === "}" || hash.token === "EOF" || hash.token === "BR++" || hash.token === "BR--" || parser.newLine || parser.wasNewLine))) {
        throw new SyntaxError(str);
    }
};
/* End Parser Customization Methods */

/* Begin AST Node Constructors */
function ProgramNode(body) {
    this.type = "Program";
    this.body = body;
}

function EmptyStatementNode() {
    this.type = "EmptyStatement";
}

function BkStatementNode(body) {
    this.type = "BlockStatement";
    this.body = body;
}

function ExpressionStatementNode(expression) {
    this.type = "ExpressionStatement";
    this.expression = expression;
}

function IfStatementNode(test, consequent, alternate) {
    this.type = "IfStatement";
    this.test = test;
    this.consequent = consequent;
    this.alternate = alternate;
}

function BreakStatementNode() {
    this.type = "BreakStatement";
}

function ContinueStatementNode() {
    this.type = "ContinueStatement";
}

function ReturnStatementNode(argument) {
    this.type = "ReturnStatement";
    this.argument = argument;
}

function ForStatementNode(init, test, update, body) {
    this.type = "ForStatement";
    this.init = init;
    this.test = test;
    this.update = update;
    this.body = body;
}

function MathExpressionNode(expr) {
    this.type = "MathExpression";
    this.expr = expr;
}

function BoolExpressionNode(expr) {
    this.type = "BoolExpression";
    this.expr = expr;
}

function ContextAccessNode(layer1, layer2) {
    this.type = "ContextAccess";
    this.layer1 = layer1;
    this.layer2 = layer2;
}

function FunctionDeclarationNode(id, params, body, generator, expression) {
    this.type = "FunctionDeclaration";
    this.id = id;
    this.params = params;
    this.body = body;
    this.generator = generator;
    this.expression = expression;
}

function VariableDeclaratorNode(id, init) {
    this.type = "VariableDeclarator";
    this.id = id;
    this.init = init;
}

function UnaryExpressionNode(operator, prefix, argument) {
    this.type = "UnaryExpression";
    this.operator = operator;
    this.prefix = prefix;
    this.argument = argument;
}

function BinaryExpressionNode(operator, left, right) {
    this.type = "BinaryExpression";
    this.operator = operator;
    this.left = left;
    this.right = right;
}

function AssignmentExpressionNode(operator, left, right) {
    this.type = "AssignmentExpression";
    this.operator = operator;
    this.left = left;
    this.right = right;
}

function UpdateExpressionNode(operator, argument, prefix) {
    this.type = "UpdateExpression";
    this.operator = operator;
    this.argument = argument;
    this.prefix = prefix;
}

function LogicalExpressionNode(operator, left, right) {
    this.type = "LogicalExpression";
    this.operator = operator;
    this.left = left;
    this.right = right;
}

function ConditionalExpressionNode(test, consequent, alternate) {
    this.type = "ConditionalExpression";
    this.test = test;
    this.consequent = consequent;
    this.alternate = alternate;
}

function IdentifierNode(name) {
    this.type = "Identifier";
    this.name = name;
}

function LiteralNode(value) {
    this.type = "Literal";
    this.value = value;
}

function MatrixAccessNode(name, indexes) {
    this.type = "MatrixAccess";
    this.name = name;
    this.indexes = indexes;
}

/* End AST Node Constructors */

/* Expose the AST Node Constructors */
parser.ast = {};
parser.ast.ProgramNode = ProgramNode;
parser.ast.BlockStatementNode = BlockStatementNode;
parser.ast.ExpressionStatementNode = ExpressionStatementNode;
parser.ast.IfStatementNode = IfStatementNode;
parser.ast.ForStatementNode = ForStatementNode;
parser.ast.BoolStatementNode = BoolStatementNode;
parser.ast.MathStatementNode = MathStatementNode;
parser.ast.MatrixAccessNode = MatrixAccessNode;
parser.ast.BreakStatementNode = BreakStatementNode;
parser.ast.ContinueStatementNode = ContinueStatementNode;
parser.ast.ReturnStatementNode = ReturnStatementNode;
parser.ast.ForStatementNode = ForStatementNode;
parser.ast.FunctionDeclarationNode = FunctionDeclarationNode;
parser.ast.VariableDeclaratorNode = VariableDeclaratorNode;
parser.ast.UnaryExpressionNode = UnaryExpressionNode;
parser.ast.BinaryExpressionNode = BinaryExpressionNode;
parser.ast.AssignmentExpressionNode = AssignmentExpressionNode;
parser.ast.UpdateExpressionNode = UpdateExpressionNode;
parser.ast.LogicalExpressionNode = LogicalExpressionNode;
parser.ast.IdentifierNode = IdentifierNode;
parser.ast.LiteralNode = LiteralNode;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
setInput:function (input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
input:function (){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
unput:function (ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
more:function (){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function (){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
less:function (n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
pastInput:function (){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
upcomingInput:function (){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function (){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
next:function (){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
stateStackSize:function stateStackSize(){return this.conditionStack.length},
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
/**/) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip block comments */
break;
case 2:/* skip line comments */
break;
case 3:return "STRING_LITERAL";
break;
case 4:return "ELSE";
break;
case 5:return "FOR";
break;
case 6:return "FUNCTION";
break;
case 7:return "IF";
break;
case 8:return "RETURN";
break;
case 9:return "THIS";
break;
case 10:return "VAR";
break;
case 11:return "TRUE";
break;
case 12:return "FALSE";
break;
case 13:return "NULL";
break;
case 14:return "UNDEFINED";
break;
case 15:return "IDENTIFIER";
break;
case 16:return "NUMERIC_LITERAL";
break;
case 17:return "NUMERIC_LITERAL";
break;
case 18:return "NUMERIC_LITERAL";
break;
case 19:return "{";
break;
case 20:return "}";
break;
case 21:return "(";
break;
case 22:return ")";
break;
case 23:return "[";
break;
case 24:return "]";
break;
case 25:return ";";
break;
case 26:return ",";
break;
case 27:return "?";
break;
case 28:return ":";
break;
case 29:return "===";
break;
case 30:return "==";
break;
case 31:return "=";
break;
case 32:return "!==";
break;
case 33:return "!=";
break;
case 34:return "!";
break;
case 35:return "<=";
break;
case 36:return "<";
break;
case 37:return ">=";
break;
case 38:return ">";
break;
case 39:return "+=";
break;
case 40:return "++";
break;
case 41:return "+";
break;
case 42:return "-=";
break;
case 43:return "--";
break;
case 44:return "-";
break;
case 45:return "*=";
break;
case 46:return "*";
break;
case 47:return "/=";
break;
case 48:return "/";
break;
case 49:return "%=";
break;
case 50:return "%";
break;
case 51:return "&&";
break;
case 52:return "&=";
break;
case 53:return "&";
break;
case 54:return "||";
break;
case 55:return "|=";
break;
case 56:return "|";
break;
case 57:return "^=";
break;
case 58:return "^";
break;
case 59:return "EOF";
break;
case 60:return "ERROR";
break;
case 61:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*(.|\r|\n)*?\*\/)/,/^(?:\/\/.*($|\r\n|\r|\n))/,/^(?:(("(([^\"\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})))|(\\(\r\n|\r|\n)))*")|('(([^\'\\\n\r]+)|(\\((([\'\"\\bfnrtv])|([^\'\"\\bfnrtv0-9xu]))|((?:[1-7][0-7]{0,2}|[0-7]{2,3}))|([x]([0-9a-fA-F]){2})))|(\\(\r\n|\r|\n)))*')))/,/^(?:else)/,/^(?:for)/,/^(?:function)/,/^(?:if)/,/^(?:return)/,/^(?:this)/,/^(?:var)/,/^(?:true)/,/^(?:false)/,/^(?:null)/,/^(?:undefined)/,/^(?:(([?_a-zA-Z])(([?_a-zA-Z])|[0-9])*))/,/^(?:(((([0-9])|(([1-9])([0-9]+)*))\.([0-9]+)*(([eE])([+-]?([0-9])+))?)|(\.([0-9]+)(([eE])([+-]?([0-9])+))?)|((([0-9])|(([1-9])([0-9]+)*))(([eE])([+-]?([0-9])+))?)))/,/^(?:([0][xX]([0-9a-fA-F])+))/,/^(?:([0]([0-7])+))/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:;)/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:===)/,/^(?:==)/,/^(?:=)/,/^(?:!==)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:\+=)/,/^(?:\+\+)/,/^(?:\+)/,/^(?:-=)/,/^(?:--)/,/^(?:-)/,/^(?:\*=)/,/^(?:\*)/,/^(?:\/=)/,/^(?:\/)/,/^(?:%=)/,/^(?:%)/,/^(?:&&)/,/^(?:&=)/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|=)/,/^(?:\|)/,/^(?:\^=)/,/^(?:\^)/,/^(?:$)/,/^(?:.)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}